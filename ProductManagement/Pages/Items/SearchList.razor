@inject IGeneridCrudExtService<Item> _itemService;

<table class="table">
    <thead>
        <tr>
            <th>Item number</th>
            <th>Description</th>
            <th>Default Price</th>
            <th>Item category</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Description</td>
                <td>@item.Price.ToString("n2")</td>
                <td>@item.Category</td>
                <td>
                    <button class="btn btn-info btn-sm" type="button" @onclick="@(async () => await OnClickCallback.InvokeAsync(item.Id))">Select</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<Item> items;

    [Parameter] public int customerId { get; set; }

    [Parameter] public EventCallback<int> OnClickCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await LoadItems();
        }
    }

    private async Task LoadItems()
    {
        items = await _itemService.GetAllById(customerId);
        StateHasChanged();
    }
}
